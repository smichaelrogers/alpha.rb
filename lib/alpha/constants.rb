module Alpha

  # Search
  #----------------------------------------------------------------------------
  MAXPLY        =  10
  INF           =  50000

  # Position
  #----------------------------------------------------------------------------
  WHITE         =  0
  BLACK         =  1
  PAWN          =  0
  KNIGHT        =  1
  BISHOP        =  2
  ROOK          =  3
  QUEEN         =  4
  KING          =  5
  NULL          = -1
  EMPTY         =  6

  # Movement
  #----------------------------------------------------------------------------
  UP            = [-8,  8]
  SIDE          = [ 7,  0]
  STEPS         = [
    [],
    [-21,-19,-12, -8,  8, 12, 19, 21],
    [-11, -9,  9, 11],
                    [-10, -1,  1, 10],
    [-11, -9,  9, 11,-10, -1,  1, 10],
    [-11, -9,  9, 11,-10, -1,  1, 10]
  ]

  # Evaluation
  #----------------------------------------------------------------------------
  VALUE         = [100, 320, 325, 500, 900, 6400]
  PST           = [
    -40,-30,-20,-10,-10,-20,-30,-40,
    -30,-15, -5,  0,  0, -5,-15,-30,
    -20, -5, 10, 15, 15, 10, -5,-20,
    -10,  5, 20, 30, 30, 20,  5,-10,
    -10,  5, 20, 30, 30, 20,  5,-10,
    -20, -5, 10, 15, 15, 10, -5,-20,
    -30,-15, -5,  0,  0, -5,-15,-30,
    -40,-30,-20,-10,-10,-20,-30,-40
  ]

  # Boundary mapping
  #----------------------------------------------------------------------------
  SQ            = [
     0,  1,  2,  3,  4,  5,  6,  7,
     8,  9, 10, 11, 12, 13, 14, 15,
    16, 17, 18, 19, 20, 21, 22, 23,
    24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47,
    48, 49, 50, 51, 52, 53, 54, 55,
    56, 57, 58, 59, 60, 61, 62, 63
  ]
  SQ64          = [
    21, 22, 23, 24, 25, 26, 27, 28,
    31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48,
    51, 52, 53, 54, 55, 56, 57, 58,
    61, 62, 63, 64, 65, 66, 67, 68,
    71, 72, 73, 74, 75, 76, 77, 78,
    81, 82, 83, 84, 85, 86, 87, 88,
    91, 92, 93, 94, 95, 96, 97, 98
  ]
  SQ120         = [
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,
    -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,
    -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,
    -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,
    -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,
    -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,
    -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,
    -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
  ]

  # Utility
  #----------------------------------------------------------------------------
  ROWS          = SQ.each_slice(8).to_a
  FILE          = 'abcdefgh'
  RANK          = '87654321'
  NOTATION      = SQ.map { |i| "#{FILE[i & 7]}#{RANK[i >> 3]}" }
  ASCII         = ['PNBRQK_', 'pnbrqk_']
  UTF8          = ['♙♘♗♖♕♔_', '♟♞♝♜♛♚_']
  COLORS        = 'wb'
  FEN_INITIAL   = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'
  PIECES        = {}.tap { |h| ASCII.each_with_index { |pieces, color|
      pieces.each_char.with_index { |key, piece| h[key] = { piece: piece, color: color } }
    } }

  # Structs
  #----------------------------------------------------------------------------
  Move          = Struct.new(:from, :to, :piece, :target)
  Result        = Struct.new(:fen, :move, :nodes, :clock, :board) do
    def serialize
      {
        fen: fen,
        nodes: nodes,
        clock: clock,
        nps: (nodes / clock.to_f).round(2),
        board: board,
        move: {
          from: NOTATION[move.from],
          to: NOTATION[move.to],
          piece: ASCII[1][move.piece],
          target: ASCII[1][move.target]
        }
      }
    end
  end
end
